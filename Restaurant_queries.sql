create schema if not exists restaurant;

set search_path to restaurant;

-- create table for products
drop table if exists res_product;
create table res_product (
	product_name text,
    product_price float
);


-- update the table and set a primary, auto-increment key
alter table res_product add column id serial primary key;


-- create table for orders
-- imported orderdate as text, will be converted to date when the table is updated
drop table if exists res_order;
create table res_order (
	orderNumber text,
	orderDate text,
	orderTime time,
	ItemName text,
	Quantity int,
    product_price float,
	TotalProducts int
);


-- data imported using import wizard

-- setting datestyle to date/month/year to import the data
SET datestyle TO postgres, dmy;
show datestyle;


-- changing the orderDate to date datatype 
Alter table res_order
Alter column orderDate TYPE date
USING orderDate::date;

-----------------------------
-- making changes to the orders table
-----------------------------

-- 1) adding rowID as autogenerated column and setting it as primary key
alter table res_order add column id serial primary key;

-- 2) setting productID as foreign key in the orders table and linking it to the products table

-- first add a new column
ALTER TABLE res_order
add column ProductID int;

-- second, insert product ID into this column linking it to the product name
Update res_order
set productid = (select rowid from res_product where res_product.product_name = res_order.itemname)


-- delete unnecessary columns
ALTER TABLE res_order
DELETE COLUMN IF EXISTS itemname,
DELETE COLUMN IF EXISTS product_price,
DELETE COLUMN IF EXISTS totalproduct


-- adding foreign key constraint on the productid column in res_order
ALTER TABLE restaurant.res_order
ADD CONSTRAINT fk_productid
FOREIGN KEY (productid) REFERENCES restaurant.res_product(rowid)

-- end of database structuring

/*

-------------------------------
 start of data analysis
-------------------------------

*/

SELECT
	count(*)
FROM
	res_order
-- there are a total of 299,775 rows

-- let's check if there are any ordernumber values that are null
SELECT
	count(*)
FROM
	res_order
WHERE 
	ordernumber is null;
-- 224,957 records have null values in them

-- delete all null value records
DELETE 
FROM
	res_order
WHERE
	ordernumber is null;
	
-- check again to get number of records
SELECT
	count(*)
FROM
	res_order
-- total record returned is 74,818 which is the correct value





-- selecting distinct order numbers
SELECT
	COUNT(DISTINCT (ordernumber))
FROM
	res_order
-- 13,397 distinct orders found in the table




-- checking the date range of the data
SELECT
	MIN(orderdate), MAX(orderdate)
FROM 
	res_order;
-- start date of orders is: 2015-09-01 (yyyy-mm-dd)
-- end date of orders is: 2019-08-03 (yyyy-mm-dd)


-- getting number of orders per year and the min and max date per year
SELECT
	MIN(orderdate) as "Start Date", MAX(orderdate) as "End Date", COUNT(DISTINCT(ordernumber)) as "total orders/year"
FROM
	res_order
GROUP BY
	DATE_PART('year', orderdate)
ORDER BY
	"Start Date"
	
	
	
-- checking the total per order
SELECT
	ordernumber, COUNT(product_name) as "Items Ordered", ROUND(SUM(product_price * quantity)::numeric,2) as "Total Order"
FROM
	res_order o
INNER JOIN
	res_product p
ON
	o.productid = P.rowid
GROUP BY 
	ordernumber
ORDER BY 
	 3 desc
-- highest bill was 1242
-- lowest bill is 0.5





-- calculating total orders per month and year, total amount earned per month and year

SELECT
	date_part('year', orderdate) as Year,
	date_part('month', orderdate) as Month,
	COUNT(ordernumber) OVER (PARTITION BY date_part('year', orderdate), date_part('month', orderdate)) as "Orders per month",
	COUNT(ordernumber) OVER (PARTITION BY date_part('year', orderdate)) as "Orders per year",
	ROUND(SUM(SUM(product_price * quantity)) over (partition by date_part('year', orderdate), date_part('month', orderdate))::numeric, 2) as "Total earned per month",
	ROUND(SUM(SUM(product_price * quantity)) over (partition by date_part('year', orderdate))::numeric,2) as "Total earned per year"
FROM
	res_order o
INNER JOIN
	res_product p
ON
	o.productid = P.rowid
GROUP BY 
	orderdate, date_part('year', orderdate),date_part('month', orderdate), ordernumber
order by
	orderdate

	

